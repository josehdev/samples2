[CmdletBinding()]
Param(
	[ValidateSet('DEV','UAT','Production')]
	[Parameter(Mandatory=$True, HelpMessage="Please enter environment UAT or Production")]
	[string]$Environment
)


Function CreateAppRole([string] $Name, [string] $Description, [string] $Id)
{
    $appRole = New-Object Microsoft.Open.AzureAD.Model.AppRole
    $appRole.AllowedMemberTypes = New-Object System.Collections.Generic.List[string]
    $appRole.AllowedMemberTypes.Add("User");
    $appRole.DisplayName = $Name
    $appRole.Id = $Id
    $appRole.IsEnabled = $true
    $appRole.Description = $Description
    $appRole.Value = $Name;
    return $appRole
}

Try {
	Write-Host "********" -ForegroundColor "Green"
	Write-Host "*** Script to add roles to App Registration and assign AD Groups ***" -ForegroundColor "Green"


	if($Environment -eq "DEV")
    {
        $InputFileName = "Input_DEV.json"
        Write-Host "*** Deploy in $Environment ***" -ForegroundColor "Green"
    }
	elseif($Environment -eq "UAT")
    {
        $InputFileName = "Input_UAT.json"
        Write-Host "*** Deploy in $Environment ***" -ForegroundColor "Green"
    }
    elseif($Environment -eq "Production")
    {
        $InputFileName = "Input_PRD.json"
        Write-Host "*** Deploy in $Environment ***" -ForegroundColor "Yellow"

        $choice = Read-Host "Do you wish to execute this script in Production [Y|N]"
        if($choice -ne "Y") 
        {
            Write-Host "Exiting the script..."
            exit
        }        
    }
    else
    {
        Write-Host "$Environment does not exist, exiting the deployment..."
        exit
    }

	#Read Input File
	$inputFile = "$(Get-Content "$PSScriptRoot\$InputFileName")" | ConvertFrom-Json

	#Load Azure variables 
	$tenantId = $inputFile.Azure.TenantId
	$appObjectId = $inputFile.Azure.AppObjectId
	$appClientId = $inputFile.Azure.AppClientId

	#Load new Role varaibles
	$roleName = $inputFile.Role.Name
	$roleDescription = $inputFile.Role.Description
	$roleId = $inputFile.Role.Id
	$roleADGroupName = $inputFile.Role.ADGroupName


	#Azure Authentication
	Connect-AzureAD -TenantId $tenantId

	# Create arrays of existing roles Value and ID
	$app = Get-AzureADApplication -ObjectId $appObjectId
	if ($app -eq $null) {throw "app registration not found."}

	$appRoles = $app.AppRoles

	$existingRolesValue = @()
	$existingRolesId = @()
	foreach ($role in $appRoles) {
	  $existingRolesValue += $role.Value
	  $existingRolesId += $role.Id
	}

	Write-Host "Existing Roles Value: $($existingRolesValue)"
	Write-Host "Existing Roles ID: $($existingRolesId)"


	#Validate if role alrerady exists
	$duplicateRole = $false
	if ($existingRolesValue.Contains($roleName)) {
		$duplicateRole = $true
		Write-Host "Role: '$($roleName)' already exists."
	}
	elseif ($existingRolesId.Contains($roleId)){
		$duplicateRole = $true
		Write-Host "A role with ID: '$($roleId)' already exists."
	}


	#Create the new role
	if (!($duplicateRole)) {
		Write-Host "Creating role '$($roleName)'"
		$newRole = CreateAppRole -Name $roleName -Description $roleDescription -Id $roleId
		$appRoles.Add($newRole)
		Set-AzureADApplication -ObjectId $app.ObjectId -AppRoles $appRoles
		Write-Host "Role '$($roleName)' created."
	}
	else {
		Write-Host "Skipping creation of role '$($roleName)'"
	}


	#Validate that group exists
	$group = Get-AzureADGroup -Filter "DisplayName eq '$roleADGroupName'"
	$validGroup = !($group -eq $null)


	if ($validGroup) {
		#Builds a list of Roles assigned to the group 
		$servicePrincipal = Get-AzureADServicePrincipal -Filter "AppId eq '$appClientId'"
		if ($servicePrincipal -eq $null) {throw "servicePrincipal not found."}

		$groupRoles = @()
		$servicePrincipal | % {
		  # Build a hash table of the service principal's app roles. The 0-Guid is
		  # used in an app role assignment to indicate that the principal is assigned
		  # to the default app role (or rather, no app role).
		  $appRoles = @{ "$([Guid]::Empty.ToString())" = "(default)" }
		  $_.AppRoles | % { $appRoles[$_.Id] = $_.DisplayName }

		  Get-AzureADGroupAppRoleAssignment -ObjectId $group.ObjectId | Select Id | % {  $groupRoles += $appRoles[$_.Id] }
		}

		#Assigns group to role
		if ($groupRoles.Contains($roleName)) {
			Write-Host "The group '$($roleADGroupName)' is already assigned to role '$($roleName)'"
			Write-Host "Skipping group assignment"	
		}
		else {
			#Assign the group to the app role
			Write-Host "Assigning group '$($roleADGroupName)' to role '$($roleName)'"
			New-AzureADGroupAppRoleAssignment -ObjectId $group.ObjectId -PrincipalId $group.ObjectId -ResourceId $servicePrincipal.ObjectId -Id $roleId
			Write-Host "Group assignment completed."
		}
	}
	else {
			Write-Host "The group '$($roleADGroupName)' was not found in Azure AD."
			Write-Host "Skipping group assignment"	
	}
}
catch {
	Write-Error $_.Exception.Message
} 	